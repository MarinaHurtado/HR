public class Solution {
    
    public static int SubStringCompareMin(String cad, int n){
        int minPos=0;
        int minVal= cad.charAt(0);
        for(int i=1; i<cad.length()-n+1; i++){
            int ascii= cad.charAt(i);
            int j=0;
            while((i+j<cad.length()) && cad.charAt(i+j) == cad.charAt(minPos+j))
                j++;
            if ((i+j<cad.length()) && cad.charAt(i+j) < cad.charAt(minPos+j)){
                minVal=ascii;
                minPos=i;
            }
        }
        return minPos;
    }
    
    public static int SubStringCompareMax(String cad, int n){
        int maxPos=0;
        int maxVal= cad.charAt(0);
        for(int i=1; i<cad.length()-n+1; i++){
            int ascii= cad.charAt(i);
            int j=0;
            while((i+j<cad.length()) && cad.charAt(i+j) == cad.charAt(maxPos+j))
                j++;
            if ((i+j<cad.length()) && cad.charAt(i+j) > cad.charAt(maxPos+j)){
                maxVal=ascii;
                maxPos=i;
            }
        }
        return maxPos;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String cad = in.nextLine();
        int n = in.nextInt();
        if(cad.length()>=n){
            int min = SubStringCompareMin(cad, n);
            int max = SubStringCompareMax(cad, n);
            
            StringBuilder subMax= new StringBuilder();
            StringBuilder subMin= new StringBuilder();
            for(int i=0; i<n; i++){
                subMin.append(cad.charAt(min+i));
                subMax.append(cad.charAt(max+i));
            }
            System.out.println(subMin);
            System.out.println(subMax);
        }
    }
}
