/*
Problem Statement
Given a string, find out the lexicographically smallest and largest substring of length k.
[Note: Lexicographic order is also known as alphabetic order dictionary order. 
So "ball" is smaller than "cat", "dog" is smaller than "dorm". Capital letter always comes before smaller letter, 
so "Happy" is smaller than "happy" and "Zoo" is smaller than "ball".]

Input Format
First line will consist a string containing english alphabets which has at most 1000 characters. 
2nd line will consist an integer k.

Output Format
In the first line print the lexicographically minimum substring. 
In the second line print the lexicographically maximum substring.

Sample Input
welcometojava
3

Sample Output
ava
wel

Explanation
Here is the list of all substrings of length 3:
wel
elc
lco
com
ome
met
eto
toj
oja
jav
ava
Among them ava is the smallest and wel is the largest.
*/


public class Solution {
    
    public static int SubStringCompareMin(String cad, int n){
        int minPos=0;
        int minVal= cad.charAt(0);
        for(int i=1; i<cad.length()-n+1; i++){
            int ascii= cad.charAt(i);
            int j=0;
            while((i+j<cad.length()) && cad.charAt(i+j) == cad.charAt(minPos+j))
                j++;
            if ((i+j<cad.length()) && cad.charAt(i+j) < cad.charAt(minPos+j)){
                minVal=ascii;
                minPos=i;
            }
        }
        return minPos;
    }
    
    public static int SubStringCompareMax(String cad, int n){
        int maxPos=0;
        int maxVal= cad.charAt(0);
        for(int i=1; i<cad.length()-n+1; i++){
            int ascii= cad.charAt(i);
            int j=0;
            while((i+j<cad.length()) && cad.charAt(i+j) == cad.charAt(maxPos+j))
                j++;
            if ((i+j<cad.length()) && cad.charAt(i+j) > cad.charAt(maxPos+j)){
                maxVal=ascii;
                maxPos=i;
            }
        }
        return maxPos;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String cad = in.nextLine();
        int n = in.nextInt();
        if(cad.length()>=n){
            int min = SubStringCompareMin(cad, n);
            int max = SubStringCompareMax(cad, n);
            
            StringBuilder subMax= new StringBuilder();
            StringBuilder subMin= new StringBuilder();
            for(int i=0; i<n; i++){
                subMin.append(cad.charAt(min+i));
                subMax.append(cad.charAt(max+i));
            }
            System.out.println(subMin);
            System.out.println(subMax);
        }
    }
}
