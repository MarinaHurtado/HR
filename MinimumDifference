import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class Pair{
    int a;
    int b;
    Pair next;

    public Pair(int a, int b, Pair n) {
        this.a = a;
        this.b = b;
        next=n;
    }
    
}

class MergeSort{
    //http://www.java2novice.com/java-sorting-algorithms/merge-sort/#sthash.tFdK4OD9.dpuf
    public int[] array;
    private int[] tempMergArr;
    private int length;

    public MergeSort(int[] array) {
        this.array = array;
        this.length = array.length;
        this.tempMergArr = new int[length];
    }
     
    public void sort() {
        doMergeSort(0, length - 1);
    }
 
    private void doMergeSort(int lowerIndex, int higherIndex) {
         
        if (lowerIndex < higherIndex) {
            int middle = lowerIndex + (higherIndex - lowerIndex) / 2;
            // Below step sorts the left side of the array
            doMergeSort(lowerIndex, middle);
            // Below step sorts the right side of the array
            doMergeSort(middle + 1, higherIndex);
            // Now merge both sides
            mergeParts(lowerIndex, middle, higherIndex);
        }
    }
 
    private void mergeParts(int lowerIndex, int middle, int higherIndex) {
 
        for (int i = lowerIndex; i <= higherIndex; i++) {
            tempMergArr[i] = array[i];
        }
        int i = lowerIndex;
        int j = middle + 1;
        int k = lowerIndex;
        while (i <= middle && j <= higherIndex) {
            if (tempMergArr[i] <= tempMergArr[j]) {
                array[k] = tempMergArr[i];
                i++;
            } else {
                array[k] = tempMergArr[j];
                j++;
            }
            k++;
        }
        while (i <= middle) {
            array[k] = tempMergArr[i];
            k++;
            i++;
        }
 
    }
}



public class Solution {

    public static Pair finMinPair(int[] arr){
        int dif = Math.abs(arr[0]-arr[1]);
        Pair pairList = new Pair(arr[0],arr[1],null);
        for (int i=1; i<arr.length-2; i++){
            int newDif= Math.abs(arr[i]-arr[i+1]);
            if(newDif<dif){
                dif=newDif;
                pairList= new Pair(arr[i], arr[i+1], null);
            }
            else if(newDif==dif){
                Pair aux= pairList;
                while(aux.next!=null)
                    aux=aux.next;
                aux.next = new Pair(arr[i], arr[i+1], null);
            }
        }
        return pairList;
    }
    
    public static void main(String[] args) {
       Scanner in = new Scanner(System.in);
       int T = in.nextInt();
       int[] arr=new int[T];
       for (int i=0; i<T; i++)
           arr[i]=in.nextInt();
       MergeSort meSo = new MergeSort(arr);
       meSo.sort();
       
       Pair pairList = finMinPair(meSo.array);
       System.out.print(pairList.a + " " + pairList.b + " ");
       while(pairList.next!=null){
           pairList = pairList.next;
           System.out.print(pairList.a + " " + pairList.b + " ");
       }
    }
    
}
